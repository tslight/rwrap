#!/usr/bin/env bash

source "$HOME"/lib/bash/ask
source "$HOME"/lib/bash/chkroot
source "$HOME"/lib/bash/chkdirs
source "$HOME"/lib/bash/convert
source "$HOME"/lib/bash/plate

SELF="$(basename "$0")"
LOG="/var/log/$SELF-$(date +%Y.%m.%d).log"
GROUP="Users_UKGroupSeniorManagement"
KEY11=()
OLDBACKUPS=()

usage () {
    echo "
$(basename "$0") [NUMBER OF DAYS]
"
}

sort_array () {
    IFS=$'\n'
    KEY11=($(sort <<<"${KEY11[*]}"))
    unset IFS
}

get_bkupdir () {
    read -rep "Enter a backup directory: " BACKUPDIR
}

get_days () {
    read -rep "Enter a number of days: " DAYS
}

get_key11 () {
    USERS=($(getent passwd | cut -d ":" -f 1))
    for u in "${USERS[@]}"; do
	if id "$u" | grep -qi "$GROUP"; then
	    KEY11+=("$u")
	fi
    done
}

log_key11 () {
    echo "Found the following Key 11 members:" >> "$LOG"
    for k in "${KEY11[@]}"; do
	echo "$GROUP: ${k##*\\}" >> "$LOG"
    done
}

remove_key11 () {
    local ksam dir dsam

    for k in "${KEY11[@]}"; do
	ksam="${k##*\\}" # param substitution to remove domain & get sam name
	# ! assigns d to element index instead of element value
	for d in "${!BACKUPS[@]}"; do
	    dir="${BACKUPS[d]}" # get elem value
	    dsam="${dir##*/}" # param substitution to remove path & get sam name
	    if [[ "$ksam" == "$dsam" ]]; then
		echo "Found backup for $ksam at $dir. Leaving alone!" | tee -a "$LOG"
		unset "BACKUPS[d]"
	    fi
	done
    done
}

get_olddirs () {
    for d in "${BACKUPS[@]}"; do
	while IFS=  read -r -d $'\0' path; do
	    OLDBACKUPS+=("$path")
	done < <(find "$d" -maxdepth 1 -mindepth 1 -type d -mtime +"$DAYS" -print0)
    done
}

delete_olddirs () {
    local -i size total
    local hrsize hrtotal

    for d in "${OLDBACKUPS[@]}"; do
	size=$(du -sb "$d" | awk 'NF{NF--};1') # https://unix.stackexchange.com/a/234436
	hrsize=$(convert "$size")
	if ask "Would you like to delete $d ($hrsize) ? "; then
	    echo "Deleting $d ($hrsize)..." | tee -a "$LOG"
	    total+="$size"
	    rm -rf "$d"
	else
	    echo "Not deleting $d." | tee -a "$LOG"
	fi
    done

    hrtotal=$(convert "$total")
    echo "Successfully freed $hrtotal." | tee -a "$LOG"
}

main () {
    local total=0

    [[ "$1" =~ -h|help|--help ]] && { usage; exit 0; }

    chkroot

    [[ -z "$1" ]] && get_bkupdir || BACKUPDIR="$1"
    chkdirs "$BACKUPDIR" || { usage; exit 1; }
    BACKUPS=($BACKUPDIR/*)

    [[ -z "$2" ]] && get_days || DAYS="$2"
    [[ $DAYS =~ ^[0-9]+$ ]] || { echo "Invalid integer."; usage; exit 1; }

    mkplate "$LOG" "$SELF" "Start"

    echo "Searching for Key 11 users in AD (might take a while)..."
    get_key11 &>/dev/null
    sort_array

    log_key11
    remove_key11

    echo "Getting directories in $BACKUPDIR older than $DAYS days..." | tee -a "$LOG"
    get_olddirs "$DAYS"
    delete_olddirs

    mkplate "$LOG" "$SELF" "Finish"
}

main "$@"
